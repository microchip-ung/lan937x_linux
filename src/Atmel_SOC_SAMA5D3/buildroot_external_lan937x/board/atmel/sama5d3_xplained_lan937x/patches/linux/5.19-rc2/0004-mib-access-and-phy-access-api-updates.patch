From 12a480403f8fd0e3ca4b76bfa897f2a9c2525ca9 Mon Sep 17 00:00:00 2001
From: Rakesh <rakesh.sankaranarayanan@microchip.com>
Date: Mon, 27 Jun 2022 20:20:53 +0530
Subject: [PATCH 4/4] mib access and phy access api updates

---
 drivers/net/dsa/microchip/lan937x_dev.c  | 106 +++++++++++++++++++++--
 drivers/net/dsa/microchip/lan937x_dev.h  |   6 +-
 drivers/net/dsa/microchip/lan937x_main.c |   4 +-
 drivers/net/dsa/microchip/lan937x_reg.h  |   7 ++
 4 files changed, 113 insertions(+), 10 deletions(-)

diff --git a/drivers/net/dsa/microchip/lan937x_dev.c b/drivers/net/dsa/microchip/lan937x_dev.c
index 1574d38c8d49..4b1c9323c978 100644
--- a/drivers/net/dsa/microchip/lan937x_dev.c
+++ b/drivers/net/dsa/microchip/lan937x_dev.c
@@ -18,6 +18,8 @@
 #include "lan937x_ptp.h"
 #include "lan937x_flower.h"
 
+#define LAN937x_MIB_CNT 38
+
 const struct mib_names lan937x_mib_names[] = {
 	{ 0x00, "rx_hi" },
 	{ 0x01, "rx_undersize" },
@@ -55,6 +57,25 @@ const struct mib_names lan937x_mib_names[] = {
 	{ 0x81, "tx_total" },
 	{ 0x82, "rx_discards" },
 	{ 0x83, "tx_discards" },
+	{ 0x84, "rx_bad_byte_cnt" },
+	{ 0x85, "tx_pkt_lnkerr_cnt" },
+	/* Port Queue Statistics */
+	{ 0x00, "fr_cnt_que0" },
+	{ 0x04, "fr_cnt_que1" },
+	{ 0x08, "fr_cnt_que2" },
+	{ 0x0C, "fr_cnt_que3" },
+	{ 0x10, "fr_cnt_que4" },
+	{ 0x14, "fr_cnt_que5" },
+	{ 0x18, "fr_cnt_que6" },
+	{ 0x1C, "fr_cnt_que7" },
+	{ 0x20, "byte_cnt_que0" },
+	{ 0x24, "byte_cnt_que1" },
+	{ 0x28, "byte_cnt_que2" },
+	{ 0x3C, "byte_cnt_que3" },
+	{ 0x30, "byte_cnt_que4" },
+	{ 0x34, "byte_cnt_que5" },
+	{ 0x38, "byte_cnt_que6" },
+	{ 0x3C, "byte_cnt_que7" },
 };
 
 int lan937x_cfg(struct ksz_device *dev, u32 addr, u8 bits, bool set)
@@ -115,6 +136,14 @@ void lan937x_cfg_port_member(struct ksz_device *dev, int port, u8 member)
 	lan937x_pwrite32(dev, port, REG_PORT_VLAN_MEMBERSHIP__4, member);
 }
 
+bool is_lan932x(struct ksz_device *dev)
+{
+	if ((GET_CHIP_ID_LSB(dev->chip_id) & CHIP_SKU_MASK) == CHIP_SKU_2X)
+		return true;
+	else
+		return false;
+}
+
 static void lan937x_flush_dyn_mac_table(struct ksz_device *dev, int port)
 {
 	unsigned int value;
@@ -172,11 +201,26 @@ static void lan937x_r_mib_cnt(struct ksz_device *dev, int port, u16 addr,
 	*cnt += data;
 }
 
+static void lan937x_r_que_cnt(struct ksz_device *dev, int port, u16 addr,
+			      u64 *cnt)
+{
+	u32 data;
+
+	if (!is_lan932x(dev))
+		return;
+	lan937x_pread32(dev, port, (REG_PORT_QUEUE_COUNTER + addr), &data);
+	*cnt += data;
+}
+
 void lan937x_r_mib_pkt(struct ksz_device *dev, int port, u16 addr,
 		       u64 *dropped, u64 *cnt)
 {
+	u16 index = addr;
 	addr = lan937x_mib_names[addr].index;
-	lan937x_r_mib_cnt(dev, port, addr, cnt);
+	if (index < LAN937x_MIB_CNT)
+		lan937x_r_mib_cnt(dev, port, addr, cnt);
+	else
+		lan937x_r_que_cnt(dev, port, addr, cnt);
 }
 
 static void lan937x_r_mib_stats64(struct ksz_device *dev, int port)
@@ -389,8 +433,8 @@ static int lan937x_vphy_ind_addr_wr(struct ksz_device *dev, int addr, int reg)
 	return ksz_write16(dev, REG_VPHY_IND_ADDR__2, temp);
 }
 
-int lan937x_internal_phy_write(struct ksz_device *dev, int addr, int reg,
-			       u16 val)
+static int lan937x_internal_phy_write(struct ksz_device *dev, int addr, int reg,
+				      u16 val)
 {
 	unsigned int value;
 	int ret;
@@ -425,8 +469,33 @@ int lan937x_internal_phy_write(struct ksz_device *dev, int addr, int reg,
 	return 0;
 }
 
-int lan937x_internal_phy_read(struct ksz_device *dev, int addr, int reg,
-			      u16 *val)
+static int lan932x_internal_phy_write(struct ksz_device *dev, int addr, int reg,
+				      u16 val)
+{
+	int ret = 0;
+
+	ret = lan937x_pwrite16(dev, addr, reg, val);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+}
+
+int lan93xx_internal_phy_write(struct ksz_device *dev, int addr, int reg,
+			       u16 val)
+{
+	int ret;
+
+	if (is_lan932x(dev))
+		ret = lan932x_internal_phy_write(dev, addr, reg, val);
+	else
+		ret = lan937x_internal_phy_write(dev, addr, reg, val);
+
+	return ret;
+}
+
+static int lan937x_internal_phy_read(struct ksz_device *dev, int addr, int reg,
+				     u16 *val)
 {
 	unsigned int value;
 	int ret;
@@ -456,6 +525,31 @@ int lan937x_internal_phy_read(struct ksz_device *dev, int addr, int reg,
 	return ksz_read16(dev, REG_VPHY_IND_DATA__2, val);
 }
 
+static int lan932x_internal_phy_read(struct ksz_device *dev, int addr, int reg,
+				     u16 *val)
+{
+	int ret = 0;
+
+	ret = lan937x_pread16(dev, addr, reg, val);
+	if (ret < 0)
+		return ret;
+
+	return ret;
+}
+
+int lan93xx_internal_phy_read(struct ksz_device *dev, int addr, int reg,
+			      u16 *val)
+{
+	int ret;
+
+	if (is_lan932x(dev))
+		ret = lan932x_internal_phy_read(dev, addr, reg, val);
+	else
+		ret = lan937x_internal_phy_read(dev, addr, reg, val);
+
+	return ret;
+}
+
 static void lan937x_config_gbit(struct ksz_device *dev, bool gbit, u8 *data)
 {
 	if (gbit)
@@ -657,7 +751,7 @@ static int lan937x_sw_mdio_read(struct mii_bus *bus, int addr, int regnum)
 	if (regnum & MII_ADDR_C45)
 		return -EOPNOTSUPP;
 
-	ret = lan937x_internal_phy_read(dev, addr, regnum, &val);
+	ret = lan93xx_internal_phy_read(dev, addr, regnum, &val);
 	if (ret < 0)
 		return ret;
 
diff --git a/drivers/net/dsa/microchip/lan937x_dev.h b/drivers/net/dsa/microchip/lan937x_dev.h
index 28bed3395ad9..71930fcac9ee 100644
--- a/drivers/net/dsa/microchip/lan937x_dev.h
+++ b/drivers/net/dsa/microchip/lan937x_dev.h
@@ -24,9 +24,9 @@ int lan937x_pwrite32(struct ksz_device *dev, int port,
 		     int offset, u32 data);
 int lan937x_pwrite8_bulk(struct ksz_device *dev, int port, int offset,
 			 u8 *data, u8 n);
-int lan937x_internal_phy_write(struct ksz_device *dev, int addr,
+int lan93xx_internal_phy_write(struct ksz_device *dev, int addr,
 			       int reg, u16 val);
-int lan937x_internal_phy_read(struct ksz_device *dev, int addr,
+int lan93xx_internal_phy_read(struct ksz_device *dev, int addr,
 			      int reg, u16 *val);
 bool lan937x_is_internal_phy_port(struct ksz_device *dev, int port);
 bool lan937x_is_internal_base_tx_phy_port(struct ksz_device *dev, int port);
@@ -45,6 +45,8 @@ void lan937x_mac_config(struct ksz_device *dev, int port,
 void lan937x_r_mib_pkt(struct ksz_device *dev, int port, u16 addr,
 		       u64 *dropped, u64 *cnt);
 
+bool is_lan932x(struct ksz_device *dev);
+
 struct mib_names {
 	int index;
 	char string[ETH_GSTRING_LEN];
diff --git a/drivers/net/dsa/microchip/lan937x_main.c b/drivers/net/dsa/microchip/lan937x_main.c
index e3efbba94a53..bbafa11e1237 100644
--- a/drivers/net/dsa/microchip/lan937x_main.c
+++ b/drivers/net/dsa/microchip/lan937x_main.c
@@ -199,7 +199,7 @@ static int lan937x_phy_read16(struct dsa_switch *ds, int addr, int reg)
 	u16 val;
 	int ret;
 
-	ret = lan937x_internal_phy_read(dev, addr, reg, &val);
+	ret = lan93xx_internal_phy_read(dev, addr, reg, &val);
 	if (ret < 0)
 		return ret;
 
@@ -211,7 +211,7 @@ static int lan937x_phy_write16(struct dsa_switch *ds, int addr, int reg,
 {
 	struct ksz_device *dev = ds->priv;
 
-	return lan937x_internal_phy_write(dev, addr, reg, val);
+	return lan93xx_internal_phy_write(dev, addr, reg, val);
 }
 
 static void lan937x_port_stp_state_set(struct dsa_switch *ds, int port,
diff --git a/drivers/net/dsa/microchip/lan937x_reg.h b/drivers/net/dsa/microchip/lan937x_reg.h
index 7edad9c5be93..80c77d4293d4 100644
--- a/drivers/net/dsa/microchip/lan937x_reg.h
+++ b/drivers/net/dsa/microchip/lan937x_reg.h
@@ -16,6 +16,10 @@
 #define CHIP_ID_71			0x71
 #define CHIP_ID_70			0x70
 
+#define CHIP_SKU_7X			0x70
+#define CHIP_SKU_2X			0x20
+#define CHIP_SKU_MASK			0xF0
+
 #define REG_CHIP_ID3__1			0x0003
 
 #define REG_GLOBAL_CTRL_0		0x0007
@@ -979,6 +983,9 @@
 
 #define REG_PTP_PORT_LINK_DELAY__4	0x0C18
 
+/* D - QUEUE COUNTERS */
+#define REG_PORT_QUEUE_COUNTER          0x0D00
+
 /* Port Switch Ingress Control Memory Map*/
 #define REG_PORT_RX_MIRROR_CTL			0x0800
 #define REG_PORT_RX_PRI_CTL			0x0801
-- 
2.34.1

