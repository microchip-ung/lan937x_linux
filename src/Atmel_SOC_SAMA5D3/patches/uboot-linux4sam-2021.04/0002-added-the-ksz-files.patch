From 9b5c9d112569e50499d91c58a83569a530fb2fec Mon Sep 17 00:00:00 2001
From: arun <arun.ramadoss@microchip.com>
Date: Thu, 26 Aug 2021 15:43:32 +0530
Subject: [RFC PATCH net-next 2/3] added the ksz files

Signed-off-by: arun <arun.ramadoss@microchip.com>
---
 arch/arm/dts/at91-sama5d3_xplained.dts        |   4 +-
 cmd/spi_ksz.c                                 | 379 ++++++++++++++++++
 ...ma5d3_xplained_lan937x_nandflash_defconfig |  89 ++++
 3 files changed, 470 insertions(+), 2 deletions(-)
 create mode 100644 cmd/spi_ksz.c
 create mode 100644 configs/sama5d3_xplained_lan937x_nandflash_defconfig

diff --git uboot-linux4sam-2021.04/arch/arm/dts/at91-sama5d3_xplained.dts uboot-linuxrsam-2021.04/arch/arm/dts/at91-sama5d3_xplained.dts
index fc508002a7..a33a993b49 100644
--- uboot-linux4sam-2021.04/arch/arm/dts/at91-sama5d3_xplained.dts
+++ uboot-linuxrsam-2021.04/arch/arm/dts/at91-sama5d3_xplained.dts
@@ -139,7 +139,7 @@
 				phy-mode = "rgmii";
 				#address-cells = <1>;
 				#size-cells = <0>;
-				status = "okay";
+				status = "disabled";
 
 				ethernet-phy@7 {
 					reg = <0x7>;
@@ -176,7 +176,7 @@
 			};
 
 			spi1: spi@f8008000 {
-				cs-gpios = <&pioC 25 0>;
+				cs-gpios = <&pioC 28 0>;
 				status = "okay";
 			};
 
diff --git uboot-linux4sam-2021.04/cmd/spi_ksz.c uboot-linuxrsam-2021.04/cmd/spi_ksz.c
new file mode 100644
index 0000000000..b99a40d38f
--- /dev/null
+++ uboot-linuxrsam-2021.04/cmd/spi_ksz.c
@@ -0,0 +1,379 @@
+/*
+ * (C) Copyright 2002
+ * Gerald Van Baren, Custom IDEAS, vanbaren@cideas.com
+ *
+ * SPDX-License-Identifier:	GPL-2.0+
+ */
+
+/*
+ * SPI Read/Write Utilities
+ */
+
+#include <common.h>
+#include <command.h>
+#include <dm.h>
+#include <errno.h>
+#include <spi.h>
+
+/*-----------------------------------------------------------------------
+ * Definitions
+ */
+
+#ifndef MAX_SPI_BYTES
+#   define MAX_SPI_BYTES 32	/* Maximum number of bytes we can handle */
+#endif
+
+#define MAX_SPI_DATA_BYTES	(MAX_SPI_BYTES - 4)
+
+/*
+ * Values from last command.
+ */
+static unsigned int	bus = CONFIG_DEFAULT_KSZ_SPI_BUS;
+static unsigned int	cs = 0;
+static unsigned int	mode = CONFIG_DEFAULT_KSZ_SPI_MODE;
+static unsigned int	speed = 10000000;
+static int		debug = 0;
+static int		bitlen;
+static int		size;
+static uchar 		dout[MAX_SPI_BYTES];
+static uchar 		din[MAX_SPI_BYTES];
+
+/* SPI frame opcodes */
+#define KS_SPIOP_RD			3
+#define KS_SPIOP_WR			2
+
+#define SPI_ADDR_SHIFT			24
+#define SPI_ADDR_MASK			((1 << SPI_ADDR_SHIFT) - 1)
+#define SPI_TURNAROUND_SHIFT		5
+
+static int spi_cmd(uint addr, int len, int read)
+{
+	int j;
+	uint op = KS_SPIOP_WR;
+
+	if (read)
+		op = KS_SPIOP_RD;
+	addr &= SPI_ADDR_MASK;
+	addr |= op << SPI_ADDR_SHIFT;
+	addr <<= SPI_TURNAROUND_SHIFT;
+	for (j = 0; j < 4; j++) {
+		dout[3 - j] = (uchar) addr;
+		addr >>= 8;
+	}
+	return j;
+}
+
+static int spi_def_size(void)
+{
+	return 1;
+}
+
+static int spi_little(void)
+{
+	return 0;
+}
+
+static int spi_burst(void)
+{
+	return 1;
+}
+
+static int spi_data(char *param, uchar *val, int max, int cap, int size,
+	int num)
+{
+	char pad[8];
+	char hex[4];
+	int diff;
+	int i = 0;
+	int len = 0;
+	char *buf = param;
+
+	while (*buf++ && len < max) {
+		i++;
+		if (!(i & 1))
+			len++;
+	}
+	len = size * 2;
+	i %= len;
+	diff = (len - i) % len;
+	memset(pad, '0', 8);
+	pad[diff] = '\0';
+	hex[2] = '\0';
+	hex[1] = '\0';
+	i = 0;
+	len = 0;
+	buf = pad;
+	while (*buf) {
+		hex[i++] = *buf++;
+		if (2 == i) {
+			val[len++] = (uchar) simple_strtoul(hex, NULL, 16);
+			i = 0;
+		}
+	}
+	while (*param && len < max) {
+		hex[i++] = *param++;
+		if (2 == i) {
+			val[len++] = (uchar) simple_strtoul(hex, NULL, 16);
+			i = 0;
+		}
+	}
+	size *= num;
+	if (cap && len > size) {
+		diff = len - size;
+		len = size;
+		for (i = 0; i < len; i++)
+			val[i] = val[i + diff];
+	}
+	if (len < size) {
+		diff = size - len;
+		for (i = 0; i < len; i++)
+			val[i + diff] = val[i];
+		for (i = 0; i < diff; i++)
+			val[i] = 0;
+		len = size;
+	}
+	return len;
+}
+
+static int do_spi_xfer(int bus, int cs, int read, int start)
+{
+	struct spi_slave *slave;
+	int ret = 0;
+
+	char name[30], *str;
+	struct udevice *dev;
+
+	snprintf(name, sizeof(name), "generic_%d:%d", bus, cs);
+	str = strdup(name);
+	ret = spi_get_bus_and_cs(bus, cs, 1000000, mode, "spi_generic_drv",
+				 str, &dev, &slave);
+	if (ret)
+		return ret;
+
+	ret = spi_claim_bus(slave);
+	if (ret)
+		goto done;
+	ret = spi_xfer(slave, bitlen, dout, din,
+		       SPI_XFER_BEGIN | SPI_XFER_END);
+	if (ret) {
+		printf("Error %d during SPI transaction\n", ret);
+	} else if (debug) {
+		int j;
+
+		for (j = 0; j < ((bitlen + 7) / 8); j++)
+			printf("%02X", din[j]);
+		printf("\n");
+	}
+done:
+	spi_release_bus(slave);
+	if (!ret && read) {
+		int j;
+		int len;
+		int tmp;
+		int newline = 0;
+
+		tmp = 0;
+		len = bitlen / 8;
+		for (j = start; j < len; j += size) {
+			++tmp;
+			if (2 == size) {
+				if (spi_little()) {
+					ushort *tmp = (ushort *) &din[j];
+
+					*tmp = htons(*tmp);
+				}
+				printf("%02X%02X", din[j], din[j + 1]);
+				if (8 == tmp)
+					newline = 1;
+			} else if (4 == size) {
+				if (spi_little()) {
+					uint *tmp = (uint *) &din[j];
+
+					*tmp = htonl(*tmp);
+				}
+				printf("%02X%02X%02X%02X",
+					din[j], din[j + 1],
+					din[j + 2], din[j + 3]);
+				if (8 == tmp)
+					newline = 1;
+			} else {
+				printf("%02X", din[j]);
+				if (16 == tmp)
+					newline = 1;
+			}
+			if (newline) {
+				printf("\n");
+				tmp = 0;
+				newline = 0;
+			} else
+				printf(" ");
+		}
+		if (tmp)
+			printf("\n");
+	}
+
+	return ret;
+}
+
+/*
+ * SPI read/write
+ *
+ * Syntax:
+ *   kr {addr} {num}
+ *   kw {addr} {val} {num}
+ *     {addr} is the hexadecimal address
+ *     {num} is the number of addresses to access
+ *     {val} is a hexadecimal string of data to send
+ * The command prints out the hexadecimal string received via SPI.
+ */
+
+int do_ksz_spi (struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	int   j;
+	int   len;
+	int   read = 0;
+	static int start = 0;
+
+	if ('r' == argv[0][1])
+		read = 1;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		uchar val[MAX_SPI_DATA_BYTES];
+		uint  addr;
+		int   cap = 0;
+		int   num = 1;
+		int   need = 3;
+
+		if (read)
+			need--;
+
+		if (argc < need)
+			return CMD_RET_USAGE;
+
+		/* Check for size specification.
+		*/
+		if ((size = cmd_get_data_size(argv[0], 1)) < 0)
+			return 1;
+		if ('.' != argv[0][2])
+			size = spi_def_size();
+		addr = simple_strtoul(argv[1], NULL, 16);
+
+		if (argc > need && spi_burst()) {
+			cap = simple_strtoul(argv[need], NULL, 16);
+			if (cap) {
+				len = cap * size;
+				if (len > MAX_SPI_DATA_BYTES)
+					cap = MAX_SPI_DATA_BYTES / size;
+				num = cap;
+			}
+		}
+		if (!read)
+			len = spi_data(argv[2], val, MAX_SPI_DATA_BYTES, cap,
+				size, num);
+		else {
+			len = num * size;
+			memset(val, 0, len);
+		}
+
+		start = spi_cmd(addr, size, read);
+		num = size;
+		for (j = 0; j < len; j++) {
+			dout[j + start] = val[j];
+			if (size > 1 && spi_little()) {
+				--num;
+				if (!num) {
+					if (2 == size) {
+						ushort *tmp = (ushort *)
+							&dout[(j & ~1) + start];
+
+						*tmp = htons(*tmp);
+					} else if (4 == size) {
+						uint *tmp = (uint *)
+							&dout[(j & ~3) + start];
+
+						*tmp = htonl(*tmp);
+					}
+					num = size;
+				}
+			}
+		}
+		len += start;
+		bitlen = len * 8;
+	}
+
+	if (do_spi_xfer(bus, cs, read, start))
+		return 1;
+
+	return 0;
+}
+
+/*
+ * SPI read/write
+ *
+ * Syntax:
+ *   spi {dev} {num_bits} {dout}
+ *     {dev} is the device number for controlling chip select (see TBD)
+ *     {num_bits} is the number of bits to send & receive (base 10)
+ *     {dout} is a hexadecimal string of data to send
+ * The command prints out the hexadecimal string received via SPI.
+ */
+
+int do_spi (struct cmd_tbl *cmdtp, int flag, int argc, char * const argv[])
+{
+	char  *cp = 0;
+
+	/*
+	 * We use the last specified parameters, unless new ones are
+	 * entered.
+	 */
+
+	if ((flag & CMD_FLAG_REPEAT) == 0)
+	{
+		if (argc >= 2) {
+			cs = simple_strtoul(argv[1], &cp, 10);
+			if (*cp == ':') {
+				bus = cs;
+				cs = simple_strtoul(cp+1, &cp, 10);
+			}
+			if (*cp == '.')
+				mode = simple_strtoul(cp+1, NULL, 10);
+		}
+		if (argc >= 3)
+			speed = simple_strtoul(argv[2], NULL, 10);
+		if (argc >= 4)
+			debug = simple_strtoul(argv[3], NULL, 10);
+	}
+
+	return 0;
+}
+
+/***************************************************/
+
+U_BOOT_CMD(
+	kr, 3, 1, do_ksz_spi,
+	"KSZ SPI read command",
+	"[.b, .w, .l] <addr> [num] - Read from KSZ switch register\n"
+);
+
+U_BOOT_CMD(
+	kw, 4, 1, do_ksz_spi,
+	"KSZ SPI write command",
+	"[.b, .w, .l] <addr> <val> [num] - Write to KSZ switch register\n"
+);
+
+U_BOOT_CMD(
+	ks,	5,	1,	do_spi,
+	"SPI utility command",
+	"[<bus>:]<cs>[.<mode>] <speed> <debug> - Send and receive bits\n"
+	"<bus>     - Identifies the SPI bus\n"
+	"<cs>      - Identifies the chip select\n"
+	"<mode>    - Identifies the SPI mode to use\n"
+	"<speed>   - Frequency to use\n"
+	"<debug>   - Toggle debug"
+);
diff --git uboot-linux4sam-2021.04/configs/sama5d3_xplained_lan937x_nandflash_defconfig uboot-linuxrsam-2021.04/configs/sama5d3_xplained_lan937x_nandflash_defconfig
new file mode 100644
index 0000000000..b6e6b0b8f8
--- /dev/null
+++ uboot-linuxrsam-2021.04/configs/sama5d3_xplained_lan937x_nandflash_defconfig
@@ -0,0 +1,89 @@
+CONFIG_ARM=y
+CONFIG_ARCH_CPU_INIT=y
+CONFIG_ARCH_AT91=y
+CONFIG_SYS_TEXT_BASE=0x26f00000
+CONFIG_TARGET_SAMA5D3_XPLAINED=y
+CONFIG_SPL_GPIO_SUPPORT=y
+CONFIG_SPL_LIBCOMMON_SUPPORT=y
+CONFIG_SPL_LIBGENERIC_SUPPORT=y
+CONFIG_SYS_MALLOC_F_LEN=0x2000
+CONFIG_NR_DRAM_BANKS=1
+CONFIG_DM_GPIO=y
+CONFIG_SPL_TEXT_BASE=0x300000
+CONFIG_SPL_SERIAL_SUPPORT=y
+CONFIG_SPL_DRIVERS_MISC_SUPPORT=y
+CONFIG_SPL=y
+CONFIG_DEBUG_UART_BOARD_INIT=y
+CONFIG_DEBUG_UART_BASE=0xffffee00
+CONFIG_DEBUG_UART_CLOCK=132000000
+CONFIG_ENV_OFFSET_REDUND=0x100000
+CONFIG_DEFAULT_DEVICE_TREE="at91-sama5d3_xplained"
+CONFIG_DEBUG_UART=y
+CONFIG_ENV_VARS_UBOOT_CONFIG=y
+CONFIG_FIT=y
+CONFIG_NAND_BOOT=y
+CONFIG_BOOTDELAY=3
+CONFIG_USE_BOOTARGS=y
+CONFIG_BOOTARGS="console=ttyS0,115200 earlyprintk mtdparts=atmel_nand:256k(bootstrap)ro,768k(uboot)ro,256K(env_redundant),256k(env),512k(dtb),6M(kernel)ro,-(rootfs) rootfstype=ubifs ubi.mtd=6 root=ubi0:rootfs"
+# CONFIG_DISPLAY_BOARDINFO is not set
+CONFIG_SPL_NAND_SUPPORT=y
+CONFIG_SPL_NAND_DRIVERS=y
+CONFIG_SPL_NAND_BASE=y
+CONFIG_HUSH_PARSER=y
+CONFIG_CMD_BOOTZ=y
+# CONFIG_CMD_FLASH is not set
+# CONFIG_CMD_LOADS is not set
+CONFIG_CMD_MMC=y
+CONFIG_CMD_NAND=y
+CONFIG_CMD_NAND_TRIMFFS=y
+CONFIG_CMD_USB=y
+CONFIG_CMD_DHCP=y
+CONFIG_CMD_MII=y
+CONFIG_CMD_PING=y
+CONFIG_CMD_HASH=y
+CONFIG_HASH_VERIFY=y
+CONFIG_CMD_EXT4=y
+CONFIG_CMD_EXT4_WRITE=y
+CONFIG_CMD_FAT=y
+CONFIG_CMD_MTDPARTS=y
+CONFIG_CMD_UBI=y
+CONFIG_OF_CONTROL=y
+CONFIG_SPL_OF_CONTROL=y
+CONFIG_OF_SPL_REMOVE_PROPS="interrupts interrupt-parent dmas dma-names"
+CONFIG_ENV_IS_IN_NAND=y
+CONFIG_SYS_REDUNDAND_ENVIRONMENT=y
+CONFIG_SYS_RELOC_GD_ENV_ADDR=y
+CONFIG_DM=y
+CONFIG_SPL_DM=y
+CONFIG_SPL_DM_SEQ_ALIAS=y
+CONFIG_CLK=y
+CONFIG_SPL_CLK=y
+CONFIG_CLK_AT91=y
+CONFIG_AT91_UTMI=y
+CONFIG_AT91_H32MX=y
+CONFIG_AT91_GPIO=y
+CONFIG_DM_MMC=y
+CONFIG_GENERIC_ATMEL_MCI=y
+CONFIG_MTD=y
+CONFIG_NAND_ATMEL=y
+CONFIG_PMECC_CAP=4
+CONFIG_SPL_GENERATE_ATMEL_PMECC_HEADER=y
+CONFIG_DM_ETH=y
+CONFIG_MACB=y
+CONFIG_PINCTRL=y
+CONFIG_SPL_PINCTRL=y
+CONFIG_PINCTRL_AT91=y
+CONFIG_DM_SERIAL=y
+CONFIG_DEBUG_UART_ANNOUNCE=y
+CONFIG_ATMEL_USART=y
+CONFIG_TIMER=y
+CONFIG_SPL_TIMER=y
+CONFIG_ATMEL_PIT_TIMER=y
+CONFIG_W1=y
+CONFIG_W1_GPIO=y
+CONFIG_W1_EEPROM=y
+CONFIG_W1_EEPROM_DS24XXX=y
+CONFIG_OF_LIBFDT_OVERLAY=y
+CONFIG_SPI=y
+CONFIG_DM_SPI=y
+CONFIG_CMD_SPI_KSZ=y
-- 
2.32.0

